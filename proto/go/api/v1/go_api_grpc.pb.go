// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/go_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoApiServiceClient is the client API for GoApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoApiServiceClient interface {
	Login(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
	SignUp(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
}

type goApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoApiServiceClient(cc grpc.ClientConnInterface) GoApiServiceClient {
	return &goApiServiceClient{cc}
}

func (c *goApiServiceClient) Login(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.v1.GoApiService/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goApiServiceClient) SignUp(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.v1.GoApiService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoApiServiceServer is the server API for GoApiService service.
// All implementations should embed UnimplementedGoApiServiceServer
// for forward compatibility
type GoApiServiceServer interface {
	Login(context.Context, *UserRequest) (*User, error)
	SignUp(context.Context, *UserRequest) (*User, error)
}

// UnimplementedGoApiServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGoApiServiceServer struct {
}

func (UnimplementedGoApiServiceServer) Login(context.Context, *UserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGoApiServiceServer) SignUp(context.Context, *UserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}

// UnsafeGoApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoApiServiceServer will
// result in compilation errors.
type UnsafeGoApiServiceServer interface {
	mustEmbedUnimplementedGoApiServiceServer()
}

func RegisterGoApiServiceServer(s grpc.ServiceRegistrar, srv GoApiServiceServer) {
	s.RegisterService(&GoApiService_ServiceDesc, srv)
}

func _GoApiService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoApiServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.GoApiService/login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoApiServiceServer).Login(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoApiService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoApiServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.GoApiService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoApiServiceServer).SignUp(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoApiService_ServiceDesc is the grpc.ServiceDesc for GoApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.GoApiService",
	HandlerType: (*GoApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _GoApiService_Login_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _GoApiService_SignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/go_api.proto",
}
